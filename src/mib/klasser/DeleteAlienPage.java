/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mib.klasser;

import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author theosohlman
 */
public class DeleteAlienPage extends javax.swing.JFrame {

    private InfDB idb;
    private int agentId;
    private int selectedAlienId;
    
    /**
     * Creates new form DeleteAgentPage
     */
    public DeleteAlienPage(InfDB idb, int agentId) {
        initComponents();
        this.idb = idb;
        this.agentId = agentId;
        addItemsToCmbAgentId(cmbAlienId);
        addItemsToCmbAgentId(cmbNewAreaManager);
    }

    private void addItemsToCmbAgentId(JComboBox<String> fillThisBox) {
        try {
            String sqlQuestion = "select Agent_ID from Agent";
            ArrayList<String> areaIdList = idb.fetchColumn(sqlQuestion);
            for(String anAreaId : areaIdList) {
                fillThisBox.addItem(anAreaId);
            }
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDeleteAlienHeader = new javax.swing.JLabel();
        cmbAlienId = new javax.swing.JComboBox<>();
        lblAlienId = new javax.swing.JLabel();
        lblAgentName = new javax.swing.JLabel();
        lblShowAgentName = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDeleteAlienHeader.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblDeleteAlienHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDeleteAlienHeader.setText("Delete an Alien");

        cmbAlienId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlienIdActionPerformed(evt);
            }
        });

        lblAlienId.setText("Delete this Alien-ID:");

        lblAgentName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAgentName.setText("Alien's name:");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblDeleteAlienHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblAgentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAlienId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbAlienId, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblShowAgentName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblDeleteAlienHeader)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAlienId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAlienId))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAgentName)
                    .addComponent(lblShowAgentName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnCancel))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbAlienIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlienIdActionPerformed
        selectedAgentIdString = cmbAlienId.getSelectedItem().toString();
        selectedAgentId = parseInt(selectedAgentIdString);
        
        try {
            String sqlQuery = "select Namn from Agent where Agent_ID = " + selectedAgentId;
            String agentName = idb.fetchSingle(sqlQuery);
            lblShowAgentName.setText(agentName);
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
        
        lblNewAreaManager.setVisible(false);
        cmbNewAreaManager.setVisible(false);
        
        if(checkIfIsAreaManager()) {
            lblNewAreaManager.setVisible(true);
            cmbNewAreaManager.setVisible(true);
        }
    }//GEN-LAST:event_cmbAlienIdActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            
            if(checkIfIsAreaManager()) {
                String sqlUpdateAreaManagerQuery = "update Omradeschef set "
                        + "Agent_ID = " + selectedNewAreaManager + " where Agent_ID = " + selectedAgentId + ";";
                idb.update(sqlUpdateAreaManagerQuery);
            }
            
            if(checkIfIsOfficeManager()) {
                String sqlDeleteOfficeManagerQuery = "delete from Kontorschef where Agent_ID = " + selectedAgentId;
                idb.delete(sqlDeleteOfficeManagerQuery);
            }
            
            if(checkIfIsFieldAgent()) {
                String sqlDeleteFieldAgentQuery = "delete from Faltagent where Agent_ID = " + selectedAgentId;
                idb.delete(sqlDeleteFieldAgentQuery);
            }
            
            String sqlDeleteQuery = "delete from Agent where Agent_ID = " + selectedAgentId;
            idb.delete(sqlDeleteQuery);
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        DeleteAlienPage.this.dispose();
        new AdminMenu(idb, agentId).setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private boolean checkIfIsAreaManager() {
        boolean isAreaManager = false;
        try {
            String sqlQuestion = "select Agent_ID from Omradeschef where Agent_ID = " + selectedAgentId + ";";
            String result = idb.fetchSingle(sqlQuestion);
            if(result != null) {
                isAreaManager = true;
            }
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
        return isAreaManager;
    }
    
    private boolean checkIfIsOfficeManager() {
        boolean isOfficeManager = false;
        try {
            String sqlQuestion = "select Agent_ID from Kontorschef where Agent_ID = " + selectedAgentId + ";";
            String result = idb.fetchSingle(sqlQuestion);
            if(result != null) {
                isOfficeManager = true;
            }
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
        return isOfficeManager;
    }
    
    private boolean checkIfIsFieldAgent() {
        boolean isFieldAgent = false;
        try {
            String sqlQuestion = "select Agent_ID from Faltagent where Agent_ID = " + selectedAgentId + ";";
            String result = idb.fetchSingle(sqlQuestion);
            if(result != null) {
                isFieldAgent = true;
            }
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
        return isFieldAgent;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox<String> cmbAlienId;
    private javax.swing.JLabel lblAgentName;
    private javax.swing.JLabel lblAlienId;
    private javax.swing.JLabel lblDeleteAlienHeader;
    private javax.swing.JLabel lblShowAgentName;
    // End of variables declaration//GEN-END:variables
}
