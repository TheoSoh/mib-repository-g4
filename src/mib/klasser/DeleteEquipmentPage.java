/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mib.klasser;

import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author Grupp4
 */
public class DeleteEquipmentPage extends javax.swing.JFrame {
    /**
     * Fältdeklaration.
     */
    private InfDB idb;
    private int agentId;
    private int selectedEquipmentId;
    
    /**
     * Creates new form DeleteEquipmentPage
     */
    public DeleteEquipmentPage(InfDB idb, int agentId) {
        initComponents();
        this.idb = idb;
        this.agentId = agentId;
        addItemsToCmbEquipmentId();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDeleteEquipmentHeader = new javax.swing.JLabel();
        cmbEquipmentId = new javax.swing.JComboBox<>();
        lblEquipmentId = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblShowDescription = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblSuccessMessage = new javax.swing.JLabel();
        lblErrorMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDeleteEquipmentHeader.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblDeleteEquipmentHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDeleteEquipmentHeader.setText("Delete Equipment");

        cmbEquipmentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEquipmentIdActionPerformed(evt);
            }
        });

        lblEquipmentId.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEquipmentId.setText("Equipment-ID:");

        lblDescription.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDescription.setText("Description:");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblSuccessMessage.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        lblSuccessMessage.setForeground(new java.awt.Color(0, 255, 0));
        lblSuccessMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblErrorMessage.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        lblErrorMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(lblDeleteEquipmentHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEquipmentId, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbEquipmentId, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblShowDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblSuccessMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDeleteEquipmentHeader)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbEquipmentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEquipmentId))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescription)
                    .addComponent(lblShowDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSuccessMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnCancel)
                    .addComponent(lblErrorMessage))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Denna metod loopar igenom all utrustning med id samt lägger till dessa till komboboxen.
     */
    private void addItemsToCmbEquipmentId() {
        cmbEquipmentId.removeAllItems();   
        
        try {
            String sqlQuery = "select Utrustnings_ID from Utrustning";
            ArrayList<String> equipmentIdList = idb.fetchColumn(sqlQuery);
            for(String anEquipmentId : equipmentIdList) {
                cmbEquipmentId.addItem(anEquipmentId);
            }
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
    }
    /**
     * I denna metod väljer man vilket id man vill ta bort (utrustning).
     * @param evt 
     */
    private void cmbEquipmentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEquipmentIdActionPerformed
        String chosenEquipmentId = cmbEquipmentId.getSelectedItem().toString();
        selectedEquipmentId = parseInt(chosenEquipmentId);
        
        try {
            String sqlQuery = "select Benamning from Utrustning where Utrustnings_ID = " + selectedEquipmentId + ";";
            String description = idb.fetchSingle(sqlQuery);
            lblShowDescription.setText(description);
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
    }//GEN-LAST:event_cmbEquipmentIdActionPerformed
    /**
     * I denna metod tar man bort all information om en specifik utrustning som har det valda id:t.
     * vilket kan vara från olika tabeller, t.ex. teknik eller vapen.
     * @param evt 
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            if(checkIfEquipmentIsAssigned()) {
                String sqlDeleteAssignedEquipmentQuery = "delete from Innehar_Utrustning where Utrustnings_ID = " + selectedEquipmentId + ";";
                idb.delete(sqlDeleteAssignedEquipmentQuery);
            }
            
            if(checkIfEquipmentIsTechnology()) {
                String sqlDeleteTechnologyQuery = "delete from Teknik where Utrustnings_ID = " + selectedEquipmentId + ";";
                idb.delete(sqlDeleteTechnologyQuery);
            }
            else if(checkIfEquipmentIsWeapon()) {
                String sqlDeleteWeaponQuery = "delete from Vapen where Utrustnings_ID = " + selectedEquipmentId + ";";
                idb.delete(sqlDeleteWeaponQuery);
            }
            else {
                String sqlDeleteCommunicationQuery = "delete from Kommunikation where Utrustnings_ID = " + selectedEquipmentId + ";";
                idb.delete(sqlDeleteCommunicationQuery);
            }
            
            String sqlDeleteEquipmentQuery = "delete from Utrustning where Utrustnings_ID = " + selectedEquipmentId + ";";
            idb.delete(sqlDeleteEquipmentQuery);
            lblSuccessMessage.setText(selectedEquipmentId + " was deleted!");
            lblErrorMessage.setText("");
        }
        catch(InfException e) {
            lblSuccessMessage.setText("");
            lblErrorMessage.setText("Something went wrong!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    /**
     * denna metod stänger det aktuella fönstret samt öppnar ett nytt "AdminMenu" fönster.
     * @param evt 
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
        new AdminMenu(idb, agentId).setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed
    /**
     * DEnna metod kontrollerar om en utrustning är kvitterad av en agent.
     * @return 
     */
    private boolean checkIfEquipmentIsAssigned() {
        boolean isAssigned = false;
        try {
            String sqlRowsQuery = "select Utrustnings_ID from Innehar_Utrustning where Utrustnings_ID = " + selectedEquipmentId + ";";
            String result = idb.fetchSingle(sqlRowsQuery);
            if(result != null) {
                isAssigned = true;
            }
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
        return isAssigned;
    }
    /**
     * Denna metod kontrollerar om den valda utrustningen är av typen teknologi.
     * @return 
     */
    private boolean checkIfEquipmentIsTechnology() {
        boolean isTech = false;
        
        try {
            String sqlTechQuery = "select Utrustnings_ID from Teknik where Utrustnings_ID = " + selectedEquipmentId + ";";
            String result = idb.fetchSingle(sqlTechQuery);
            
            if(result != null) {
                isTech = true;
            }
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
        return isTech;
    }
   /**
    * Denna metod kontrollerar om den valda utrustningen är av typen vapen.
    * @return 
    */ 
    private boolean checkIfEquipmentIsWeapon() {
        boolean isWeapon = false;
        
        try {
            String sqlWeaponQuery = "select Utrustnings_ID from Vapen where Utrustnings_ID = " + selectedEquipmentId + ";";
            String result = idb.fetchSingle(sqlWeaponQuery);
            
            if(result != null) {
                isWeapon = true;
            }
        }
        catch(InfException e) {
            JOptionPane.showMessageDialog(null, "Internal database error!");
        }
        return isWeapon;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox<String> cmbEquipmentId;
    private javax.swing.JLabel lblDeleteEquipmentHeader;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblEquipmentId;
    private javax.swing.JLabel lblErrorMessage;
    private javax.swing.JLabel lblShowDescription;
    private javax.swing.JLabel lblSuccessMessage;
    // End of variables declaration//GEN-END:variables
}
